# https://leetcode.com/problems/move-zeroes/

# Python Version
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        i, j = 0, -1
        while((i-j)<=len(nums)):
            if(nums[i]==0):
                for m in range(i, len(nums)+j):
                    nums[m] = nums[m+1]
                nums[j] = 0
                j -= 1
                i -= 1
            i += 1
               
class Solution:
    def moveZeroes(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        zeros = 0
        rst = []
        for x in nums:
            if x == 0:
                zeros += 1
            else:
                rst.append(x)
        for x in range(zeros):
            rst.append(0)
        for i in range(len(nums)):
            nums[i] = rst[i]

# Java Version
class Solution {
    public void moveZeroes(int[] nums) {
        int k=0;
        for(int i=0; i<nums.length; i++){
            if(nums[i] == 0){
                continue;
            }else{
                nums[k]=nums[i];
                k++;
            }
        }
        for(; k<nums.length; k++){
            nums[k] = 0;
        }
    }
}

class Solution {
    public void moveZeroes(int[] nums) {
        int k=0;
        for(int i=0; i<nums.length; i++){
            if(nums[i] != 0){
                nums[k++]=nums[i];
            }
        }
        for(; k<nums.length; k++){
            nums[k] = 0;
        }
    }
}
           


# https://leetcode.com/problems/plus-one/

# Python Version
class Solution:
    def plusOne(self, digits: List[int]) -> List[int]:
        tmp = ''
        rst = []
        for x in digits:
            tmp += str(x)
        tmp = str(int(tmp)+1)
        for x in tmp:
            rst.append(int(x))
        return rst
        
# Java Version
class Solution {
    public int[] plusOne(int[] digits) {
        int index=digits.length;
        int carry=0;
        
        for(; index>0; index--){
            carry = (digits[index-1]+1)/10;
            digits[index-1] = (digits[index-1]+1)%10;
            if(carry == 0){
                return digits;
            }
        }
        int []result = new int[digits.length+1];
        result[0] = 1;
        for(int i=0; i<digits.length; i++){
            result[i+1]=digits[i];
        }
        return result;
    }
}



# https://leetcode.com/problems/merge-sorted-array

# Python Version
class Solution:
    def merge(self, nums1: List[int], m: int, nums2: List[int], n: int) -> None:
        """
        Do not return anything, modify nums1 in-place instead.
        """
        rst = []
        for i in range(m):
            rst.append(nums1[i])
        for i in range(n):
            rst.append(nums2[i])
        rst.sort()
        for i in range(m+n):
            nums1[i] = rst[i]
            
# Java Version
class Solution {
    public void merge(int[] nums1, int m, int[] nums2, int n) {
        for(int i=m; i<(m+n); i++){
            nums1[i]=nums2[i-m];
        }
        for(int i=m+n; i<nums1.length; i++){
            nums1[i]=Integer.MAX_VALUE;
        }
        Arrays.sort(nums1);
    }
}





