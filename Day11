# https://leetcode.com/problems/fibonacci-number/

# Java Version, Recursive.
class Solution {
    public int fib(int N) {
        if(N==0){
            return 0;
        }else if(N==1){
            return 1;
        }
        return fib(N-1)+fib(N-2);    
    }
}

# Not using recursive, Java
class Solution {
    public int fib(int N) {
        int previous=0, current=1;
        if(N==0){
            return previous;
        }else if(N==1){
            return current;
        }else{
            for(int i=2; i<=N; i++){
                int tmp = current;
                current += previous;
                previous = tmp;
            }
        }
        return current;
    }
}

# Python Version
class Solution:
    def fib(self, N: int) -> int:
        if(N==0):
            return 0
        if(N==1):
            return 1
        return self.fib(N-1)+self.fib(N-2)



# https://leetcode.com/problems/array-partition-i/submissions/
# Python Version
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        result = 0
        nums.sort()
        for i in range(int(len(nums)/2)):
            result += nums[2*i]
        return result

