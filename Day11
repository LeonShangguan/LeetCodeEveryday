# https://leetcode.com/problems/fibonacci-number/

# Java Version, Recursive.
class Solution {
    public int fib(int N) {
        if(N==0){
            return 0;
        }else if(N==1){
            return 1;
        }
        return fib(N-1)+fib(N-2);    
    }
}

# Not using recursive, Java
class Solution {
    public int fib(int N) {
        int previous=0, current=1;
        if(N==0){
            return previous;
        }else if(N==1){
            return current;
        }else{
            for(int i=2; i<=N; i++){
                int tmp = current;
                current += previous;
                previous = tmp;
            }
        }
        return current;
    }
}

# Python Version
class Solution:
    def fib(self, N: int) -> int:
        if(N==0):
            return 0
        if(N==1):
            return 1
        return self.fib(N-1)+self.fib(N-2)



# https://leetcode.com/problems/array-partition-i/

# Python Version
class Solution:
    def arrayPairSum(self, nums: List[int]) -> int:
        result = 0
        nums.sort()
        for i in range(int(len(nums)/2)):
            result += nums[2*i]
        return result
        
# Java Version, implement two sort functions, bubble sort & merge sort.
class Solution {
    public void bubbleSort(int[] nums){
        int tmp;
        for(int i=0; i<nums.length; i++){
            for(int j=0; j<nums.length-i-1; j++){
                if(nums[j]>nums[j+1]){
                    tmp = nums[j];
                    nums[j] = nums[j+1];
                    nums[j+1] = tmp;
                }
            }
        }
    }
    
    public void merge(int[] nums, int left, int right, int mid){
        int i=left, j=mid+1;
        int k=0;
        int[] tmp=new int[right-left+1];
        
        while(i<=mid && j<=right){
            if(nums[i]<nums[j]){
                tmp[k++] = nums[i++];
            }else{
                tmp[k++] = nums[j++];
            }
        }
        while(i<=mid){
            tmp[k++] = nums[i++];
        }
        while(j<=right){
            tmp[k++] = nums[j++];
        }
        
        for(int m=0; m<tmp.length; m++){
            nums[left+m]=tmp[m];
        }
    }
    
    public void mergeSort(int[] nums, int left, int right){
        int mid=(left+right)/2;
        if(left<right){
            mergeSort(nums, left, mid);
            mergeSort(nums, mid+1, right);
            merge(nums, left, right, mid);
        }   
    }
    
    public int arrayPairSum(int[] nums) {
        int result=0;
        // bubbleSort(nums);
        // Arrays.sort(nums);
        mergeSort(nums, 0, nums.length-1);
        // for(int x:nums){System.out.println(x);}
        for(int i=0; i<nums.length/2; i++){
            result += nums[2*i];
        }
        return result;
    }
}

