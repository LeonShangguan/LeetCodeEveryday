# https://leetcode.com/problems/shortest-unsorted-continuous-subarray/

# Java Version
class Solution {
    public int findUnsortedSubarray(int[] nums) {
        int[] tmp = new int[nums.length];
        int result=0;
        for(int i=0; i<nums.length; i++){
            tmp[i] = nums[i];
        }
        Arrays.sort(tmp);
        for(int i=0; i<nums.length; i++){
            if(tmp[i] != nums[i]){
                for(int j=nums.length-1; j>i; j--){
                    if(tmp[j] != nums[j]){
                        result = j-i;
                        return result+1;
                    }
                }
            }
        }
        return result;
    }
}



# https://leetcode.com/problems/maximum-subarray/

#Java Version
class Solution {
    public int maxSubArray(int[] nums) {
        int curMax=0;
        int tolMax=Integer.MIN_VALUE;
        for(int num:nums){
            curMax = Math.max(curMax+num, num);
            tolMax = Math.max(curMax, tolMax);
        }
        return tolMax;
    }
}

