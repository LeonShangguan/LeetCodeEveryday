# https://leetcode.com/problems/remove-duplicates-from-sorted-array

# Java Version
class Solution {
    public int removeDuplicates(int[] nums) {
        int result=0;
        
        for(int i=0; i<nums.length-1; i++){
            if(nums[i]!=nums[i+1]){
                nums[result] = nums[i];
                result ++;
                nums[result] = nums[i+1];
            }
        }
        return result+1;
    }
}

# Python Version
class Solution:
    def removeDuplicates(self, nums: List[int]) -> int:        
        result = 0

        for i in range(len(nums)-1):
            if(nums[i]==nums[i+1]):
                continue
            else:
                nums[result]=nums[i]
                result += 1
                nums[result]=nums[i+1]

        return result+1



# https://leetcode.com/problems/remove-element

# Python Version
class Solution:
    def removeElement(self, nums: List[int], val: int) -> int:
        index, length = 0, 0
        while((index+length)<len(nums)):
            if(nums[index]==val):
                length += 1
                for i in range(index, len(nums)-1):
                    nums[i] = nums[i+1]
                continue
            index += 1
        return len(nums)-length
        
# Java Version
class Solution {
    public int removeElement(int[] nums, int val) {
        if(nums.length==0){
            return 0;
        }
        int index=nums.length;
        for(int i=0; i<index; i++){
            if(nums[i]==val){
                for(int j=i; j<index-1; j++){
                    nums[j] = nums[j+1];
                }
                index--;
                i--;
            }
        }
        return index;
    }
}



# https://leetcode.com/problems/search-insert-position

# Python Version
class Solution:
    def searchInsert(self, nums: List[int], target: int) -> int:
        if target<=nums[0]:
            return 0
        if target>nums[-1]:
            return len(nums)
        for i in range(len(nums)-1):
            if nums[i]<target<=nums[i+1]:
                return i+1
       
# Java Version
class Solution {
    public int searchInsert(int[] nums, int target) {
        if(target<=nums[0]){
            return 0;
        }
        if(target>nums[nums.length-1]){
            return nums.length;
        }
        for(int i=0; i<nums.length-1; i++){
            if(nums[i]<target && nums[i+1]>=target){
                return i+1;
            }
        }
        return 0;
    }
}


# https://leetcode.com/problems/3sum/

# Python Version, Time Limit Exceeded, O(n3)
class Solution:
    
    def twoSum(self, nums: List[int], target: int):
        result = []
        for i in range(len(nums)):
            for j in range(i+1, len(nums)):
                if((nums[i]+nums[j])==target):
                    result.append([nums[i], nums[j]])
        return result
    
    def threeSum(self, nums: List[int]) -> List[List[int]]:
        result = []
        for i in range(len(nums)):
            target = -nums[i]
            tmp = self.twoSum(nums[i+1:], target)
            for x in tmp:
                x.append(nums[i])
                x.sort()
                result.append(x)
            result.sort()
        tmp = []
        for x in result:
            if x not in tmp:
                tmp.append(x)
        return tmp
            

