# https://leetcode.com/problems/contains-duplicate/

# Python Version
class Solution:
    def containsDuplicate(self, nums: List[int]) -> bool:
        nums.sort();
        for i in range(len(nums)-1):
            if(nums[i]==nums[i+1]):
                return True;
        return False;

# Java Version
class Solution {
    public boolean containsDuplicate(int[] nums) {
        for(int i=0; i<nums.length; i++){
            for(int j=i+1; j<nums.length; j++){
                if(nums[i]==nums[j]){
                    return true;
                }
            }
        }
        return false;
    }
}



# https://leetcode.com/problems/rotate-array/submissions/

# Java Version
class Solution {
    public void rotateOne(int[] nums){
        int tmp=nums[nums.length-1];
        for(int i=nums.length-1; i>0; i--){
            nums[i]=nums[i-1];
        }
        nums[0]=tmp;
    }
    
    public void rotate(int[] nums, int k) {
        if(nums.length!=1){
            for(int i=0; i<k; i++){
                rotateOne(nums);
            }
        }
    }
}

# Python Version
class Solution:
    def rotate(self, nums: List[int], k: int) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        k=k % len(nums)
        tmp = []
        for i in range(len(nums)-k):
            tmp.append(nums[i])
        for i in range(0, k):
            nums[i] = nums[i-k+len(nums)]
        for i in range(k, len(nums)):
            nums[i] = tmp[i-k]
        
        

# https://leetcode.com/problems/best-time-to-buy-and-sell-stock/

# Python Version, Time Limit Exceed
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        result =0
        for i in range(len(prices)):
            for j in range(i+1, len(prices)):
                result = max(result, prices[j]-prices[i])
        return result
        
# Still Time Limit Exceed
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        result =0
        for i in range(len(prices)-1):
            result = max(result, prices[i]-min(prices[0:i]))
        return result
        
# This one is accepted.
class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        if(len(prices)==0):
            return 0
        minimum = prices[0]
        result =0
        for x in prices:
            if(x<minimum):
                minimum = x
            result = max(result, x-minimum)
        return result



# Java Version, Pass
class Solution {
    public static int maxValue(int[] nums, int start){
        int maxValue=0;
        for(int i=start; i<nums.length; i++){
            if(nums[i]>maxValue){
                maxValue = nums[i];
            }
        }
        return maxValue;
    }
    
    public int maxProfit(int[] prices) {
        int result=0;
        for(int i=0; i<prices.length; i++){
            if((maxValue(prices, i+1)-prices[i])>result){
                result = maxValue(prices, i+1)-prices[i];
            }
        }
        return result;
    }
}




