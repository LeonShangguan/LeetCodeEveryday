# https://leetcode.com/problems/pascals-triangle

# Python Version
class Solution:
    def generate(self, numRows: int) -> List[List[int]]:
        result=[]
        before=[1]
        for i in range(numRows):
            this = [1]*(i+1)
            for j in range(1,i):
                this[j] = before[j-1]+before[j]
            result.append(this)
            before = this
        return result
            
# Java Version





# https://leetcode.com/problems/pascals-triangle-ii/

# Python Version
class Solution:
    def getRow(self, rowIndex: int) -> List[int]:
        for i in range(rowIndex+1):
            this = [1]*(i+1)
            for j in range(1,i):
                this[j] = before[j-1]+before[j]
            before = this
        return this
       
# Java Version



# https://leetcode.com/problems/two-sum-ii-input-array-is-sorted/

# Python Version
class Solution:
    def twoSum(self, numbers: List[int], target: int) -> List[int]:
        i, j = 0, len(numbers)-1
        while(i<j):
            if((numbers[i]+numbers[j])<target):
                i += 1
            elif((numbers[i]+numbers[j])>target):
                j -= 1
            else:
                return [i+1, j+1]

# Java Version


# https://leetcode.com/problems/sort-colors/

#Python Version
class Solution:
    def sortColors(self, nums: List[int]) -> None:
        """
        Do not return anything, modify nums in-place instead.
        """
        num_0, num_1=0, 0
        for x in nums:
            if(x==0):
                num_0 += 1
            if(x==1):
                num_1 += 1
        for i in range(num_0):
            nums[i]=0
        for i in range(num_0, num_0+num_1):
            nums[i]=1
        for i in range(num_0+num_1, len(nums)):
            nums[i]=2

# Java Version
class Solution {
    public void swap(int[] list, int m, int n){
        int tmp;
        // System.out.println(m);
        tmp = list[m];
        list[m] = list[n];
        list[n] = tmp;
    }
    
    public void sortColors(int[] nums) {
        int l=0, r=nums.length-1;
        int index=0;
        while(index <= r){
            if(nums[index]==0){
                swap(nums, index, l);
                index++;
                l++;
            }else if(nums[index]==2){
                swap(nums, index, r);
                r--;
            }else{
                index++;
            }
        }
    }
}

